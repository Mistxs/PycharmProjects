import math
import json
import requests
from math import ceil
import pprint
import datetime

# data = [{'salon': 730934, 'clid': [151711437, 151734681, 151745013, 151770845, 151774739, 151915958, 151949388, 152038835, 152058963, 152079785, 152173647, 152195627, 152201338, 152219228, 152257130, 152257628, 152297018, 152308339, 152329654, 152362114, 152508075, 152545166, 152554129, 152655532, 152665207, 152668443, 152671227, 152672994, 152757527, 152812914, 152821503, 152828443, 152877273, 152895548, 152903989, 152914909, 152915039, 152996794, 152998762, 153083148, 153085358, 153101589, 153134390, 153177783, 153200649, 153203080, 153319696, 153339393, 153392456, 153415699, 153483956, 153500645, 153518991, 153538219, 153563690, 153599430, 153649052, 153656186, 153670196, 153713918, 153732371, 153734659, 153745569, 153746370, 153748294, 153760992, 153787134, 153795633, 153890444, 153901360, 153926049, 153931877, 153940000, 153964803, 154031724, 154082838, 154097476, 154148371, 154174385, 154193625, 154220779, 154223603, 154227392, 154244525, 154249380, 154324375, 154326220, 154423022, 154524571, 154531048, 154534056, 154627504, 154642339, 154705394, 154707693, 154712197, 154722413, 154723572, 154757059, 154799665, 154808241, 154840858, 154845233, 154882566, 154883487, 154906118, 154926036, 154930021, 154950630, 154967691, 154997442, 155141681, 155144694, 155148956, 155229333, 155229848, 155245889, 155247886, 155328724, 155355823, 155413964, 155426121, 155427303, 155433902, 155501671, 155551325, 155554084, 155631209, 155657071, 155688086, 155753203, 155756213, 155758957, 155763856, 155855198, 155872932, 155878852, 155907071, 155920793, 155923829, 155927549, 155946322, 155948675, 155949041, 155949829, 155979113, 155996520, 155999618, 156035695, 156039155, 156042140, 156045551, 156117314, 156138230, 156166784, 156182191, 156186288, 156190175, 156214485, 156248901, 156265856, 156289082, 156329360, 156333180, 156337523, 156343473, 156451425, 156462660, 156465257, 156493916, 156507190, 156555314, 156604959, 156607931, 156610239, 156624094, 156648445, 156658984, 156664355, 156668807, 156677804, 156744684, 156752143, 156758201, 156758586, 156789261, 156797908, 156802277, 156837690, 156898816, 156922383, 156953399, 156975414, 156977311, 156985038, 156987286, 156991627, 157005195, 157028104, 157054311, 157055203, 157064283, 157112063, 157128248, 157193723, 157210103, 157229458, 157236818, 157250878, 157295035, 157296558, 157300959, 157315601, 157327290, 157348801, 157361873, 157362117, 157394191, 157395357, 157399897, 157420978, 157465638, 157474172, 157477436, 157478380, 157481309, 157483215, 157487215, 157493281, 157630025, 157638711, 157644666, 157659669, 157661217, 157681169, 157682243, 157683174, 157688114, 157691277, 157695593, 157743164, 157756644, 157764563, 157783759, 157786749, 157810300, 157825638, 157892930, 157926539, 157969784, 157984838, 157987723, 157998359, 158020317, 158031019, 158066746, 158138928, 158163424, 158175326, 158176299, 158177314, 158184283, 158186413, 158189782, 158275926, 158292595, 158323144, 158465071, 158487705, 158515011, 158519153, 158586613, 158596073, 158605598, 158612735, 158613912, 158615095, 158629477, 158659004, 158694673, 158712365, 158721243, 158724051, 158730987, 158737379, 158744894, 158806785, 158818270, 158821406, 158822143, 158827933, 158833207, 158842382, 158893837, 158896982, 158945750, 159034916, 159067814, 159069504, 159078003, 159113085, 159143620, 159241255, 159270260, 159326078, 159348169, 159395113, 159427925, 159485148, 159487167, 159489424, 159494183, 159527425, 159568199, 159578780, 159595183, 159623610, 159653132, 159680385, 159694297, 159719594, 159734694, 159743016, 159750154, 159757828, 159764448, 159768843, 159788245, 159849039, 159852847, 159855733, 159882688, 159911082, 159919662, 159920718, 159966873, 160013583, 160024160, 160030262, 160086721, 160169891, 160170393, 160215793, 160241803, 160242520, 160252038, 160252735, 160255360, 160268087, 160298023, 160314765, 160360534, 160361706, 160375585, 160386513, 160416172, 160417504, 160435055, 160450112, 160464903, 160469265, 160476632, 160500184, 160514279, 160525923, 160536573, 160539235, 160540758, 160541147, 160553378, 160560380, 160566237, 160566743, 160584830, 160603403, 160658660, 160662447, 160676055, 160699161, 160720737, 160730996, 160735406, 160747525, 160767457, 160771229, 160777072, 160780038, 160795149, 160795675, 160801053, 160813490, 160814694, 160823119, 160832507, 160834676, 160839716, 160845999, 160847588, 160854250, 160870817, 160882231, 160923731, 160925410, 160926207, 160929947, 160932331, 160969868, 161012726, 161015503, 161022483, 161023452, 161023527, 161024439, 161026029, 161031966, 161039597, 161040989, 161049431, 161050338, 161054847, 161060151, 161066855, 161075789, 161077993, 161093289, 161106135, 161106285, 161106748, 161107886, 161109241, 161114880, 161126095, 161127794, 161129352, 161129489, 161130789, 161135627, 161137270, 161139360, 161140844, 161141077, 161146822, 161150620, 161159437, 161163253, 161163574, 161164108, 161167069, 161167146, 161174936, 161175929, 161176789, 161179557, 161197654, 161198035, 161198179, 161199274, 161208736, 161212308, 161214386, 161216713, 161216852, 161220817, 161225284, 161226412, 161228120, 161228267, 161229837, 161231769, 161240558, 161241324, 161241993, 161246136, 161246467, 161252396, 161260838, 161261671, 161263528, 161267802, 161268493, 161268971, 161269218, 161276384, 161277501, 161279128, 161288317, 161290056, 161294487, 161299932, 161301843, 161304589, 161305289, 161309738, 161311450, 161315694, 161337828, 161343850, 161348598, 161357849, 161369820, 161372692, 161376242, 161384258, 161398482, 161398840, 161411409, 161414778, 161415251, 161429535, 161432261, 161433885, 161434502, 161434688, 161435437, 161435471, 161439308, 161443559, 161443689, 161444323, 161446394, 161448095, 161451142, 161458605, 161461439, 161467039, 161472170, 161475179, 161475511, 161478616, 161491306, 161495571, 161496731, 161500692, 161501639, 161509653, 161513616, 161514268, 161518150, 161518412, 161518923, 161519103, 161527413, 161529169, 161541009, 161549169, 161553262, 161554140, 161562310, 161562568, 161569545, 161573128, 161577826, 161581968, 161587060, 161604081, 161606683, 161607798, 161608659, 161609340, 161610342, 161613847, 161621189, 161631133, 161632985, 161670799, 161674752, 161677257, 161688504, 161690274, 161691619, 161693914, 161699056, 161701842, 161702236, 161702933, 161710024, 161711612, 161716647, 161722842, 161738807, 161740682, 161781041, 161806874, 161821414, 161839955, 161848293, 161859786, 161920650, 161939586, 161942509, 161950528, 162002779, 162045931, 162063710, 162081202, 162110168, 162126821, 162211162, 162214497, 162217110, 162217366, 162220238, 162252410, 162270458, 162276971, 162281914, 162282167, 162289009, 162290744, 162299116, 162308453, 162311438, 162318239, 162326867, 162328382, 162335523, 162341939, 162346327, 162352201, 162355860, 162357925, 162367149, 162367676, 162381237, 162392225, 162396466, 162400664, 162400847, 162420909, 162424539, 162443853, 162448362, 162455697, 162462700, 162464199, 162466343, 162477302, 162482719, 162485388, 162497079, 162503585, 162527872, 162547354, 162582722, 162588246, 162589160, 162596911, 162598102, 162598394, 162598403, 162604899, 162612004, 162612289, 162617871, 162620403, 162620765, 162625052, 162632282, 162634000, 162645416, 162656668, 162658253, 162659867, 162663476, 162663748, 162665671, 162673519, 162685555, 162686897, 162689538, 162690504, 162690942, 162691127, 162691298, 162691839, 162696524, 162716006, 162721494, 162722924, 162723870, 162728208, 162731788, 162732692, 162736587, 162737686, 162745612, 162746984, 162750080, 162754147, 162759345, 162767731, 162769425, 162769570, 162786276, 162790944, 162796345, 162800986, 162820286, 162838098, 162838631, 162845413, 162862011, 162883083, 162883307, 162887898, 162889286, 162909379, 162910732, 162935182, 162946983, 162952284, 162954121, 162970286, 162974816, 162975382, 163002630, 163025813, 163028001, 163064339, 163070432, 163079242, 163086233, 163099132, 163106636, 163117838, 163125742, 163129205, 163159165, 163161644, 163183322, 163208884, 163210443, 163212142, 163244544, 163250543, 163276535, 163297082, 163317416, 163356251, 163394397, 163397125, 163427348, 163436498, 163439170, 163442726, 163444080, 163458393, 163459906, 163474323, 163509146, 163535947, 163543117, 163570494, 163585524, 163615991, 163618816, 163633013, 163635492, 163636906, 163681883, 163700210, 163719498, 163730877, 163772871, 163803348, 163803448, 163803771, 163804284, 163833492, 163843113, 163873038, 163913183, 163941734, 163949258, 163958273, 163964671, 163967840, 163996046, 164017681, 164039966, 164045052, 164050688, 164054265, 164087524, 164094228, 164111823, 164119615, 164122645, 164243151, 164249593, 164249802, 164258935, 164265018, 164308442, 164314062, 164335862, 164366976, 164389418, 164492742, 164547816, 164553252, 164576734, 164584462, 164611983, 164615600, 164643129, 164703284, 164744248, 164744434, 164766080, 164777539, 164783595, 164803721, 164813460, 164864168, 164892091, 164961761, 164985436, 165023175, 165043499, 165055181, 165129455, 165136173, 165180190, 165229601, 165238543, 165279311, 165383719, 165490682, 165558501, 165568718, 165578946, 165606363, 165637264, 165655853, 165684930, 165703586, 165713067, 165721490, 165722585, 165756903, 165761646, 165761951, 165779616, 165784054, 165788652, 165806142, 165815547, 165867848, 165881144, 165885417, 165957603, 166004071, 166038790, 166267946, 166289870, 166412104, 166413191, 166415431, 166418837, 166434770, 166463357, 166484604, 166512485, 166512682, 166517694, 166541624, 166585258, 166606964, 166626345, 166626819, 166656048, 166658869, 166663328, 166664419, 166668834, 166672039, 166676155, 166677979, 166685140, 166690514, 166692118, 167061450, 167144181, 167204183, 167317757, 167324491, 167327462, 167328262, 167343149, 167343619, 167348203, 167350860, 167373398, 167381080, 167393427, 167395029, 167402843, 167404561, 167410408, 167540173, 167554307, 167571767, 167593710, 167597276, 167636744, 167651530, 167656111, 167665430, 167672904, 167676999, 167682068, 167685827, 167720086, 167730046, 167744379, 167767975, 167777197, 167781083, 167789862, 167792026, 167793480, 167793515, 167803094, 167840969, 167849059, 167857331, 167875167, 167877884, 167878419, 167879195, 167905004, 167938565, 167944782, 167957735, 167988057, 168006963, 168062127, 168108596, 168317070, 168329993, 168336080, 168350111, 168353147, 168369999, 168408147, 168413145, 168414091, 168474549, 168492524, 168541776, 168572101, 168572883, 168621851, 168648430, 168731035, 168777372, 168780626, 168950359, 168963416, 168979232, 168988267, 169024865, 169037500, 169049971, 169055637, 169090938, 169105063, 169118953, 169154073, 169177264, 169202139, 169256979, 169270229, 169280917, 169404191, 169436404, 169468631, 169551176, 169587008, 169593192, 169605322, 169615840, 169674943, 169717302, 169802365, 169813036, 169880696, 170004650, 170034008, 170071312, 170078556, 170112480, 170117961, 170138109, 170139125, 170157492, 170164119, 170209303, 170233064, 170242764, 170267653, 170271639, 170272378, 170275046, 170296199, 170305513, 170324698, 170361072, 170385307, 170408538, 170423388, 170430635, 170503809, 170601193, 170621457, 170622146, 170622392, 170648052, 170677798, 170728701, 170771404, 170807344, 170901381, 170983146, 170985282, 171168767, 171173117, 171194606, 171211845, 171272541, 171277699, 171323000, 171324540, 171362200, 171443760, 171446548, 171450308, 171532340, 171545463, 171568271, 171568766, 171623941, 171674143, 171708170, 171740647, 171763811, 171772622, 171804468, 171834449, 171911510, 171944058, 171976042, 172062601, 172126433, 172130361, 172136807, 172211050, 172224944, 172310860, 172335168, 172362622, 172419696, 172432159, 172473973, 172513744, 172536948, 172589958, 172713250, 172817216, 172964403, 172995725, 173074666, 173092853, 173168683, 173173278, 173210333, 173269504, 173274226, 173276616, 173315638, 173326664, 173332930, 173347010, 173367028, 173378378, 173396663, 173432050, 173490982, 173525307, 173540361, 173558220, 173568198, 173592809, 173636080, 173692504, 173807477, 173830410, 173864714, 173897412, 173899862, 173918422, 173962450, 173981593, 173988703, 173989086, 173996420, 161199831, 154631008, 161172291, 161151350, 174010615, 174016687, 161221806, 160714489, 161148947, 164403594, 161510383, 165957047, 159200249, 161195623, 162129704, 161204595, 161275394, 160840156, 161211568, 161380498, 161416647, 160564985, 161118325, 161335305, 161717478, 161126491, 161031883, 161233712, 156255013], 'phone': ['+79663891715', '+79036278468', '+79260438323', '+79671410848', '+79057487609', '+79670368122', '+79656963404', '+79916238839', '+79099187000', '+79777777006', '+79267117402', '+79168349255', '+79999994801', '+79771008663', '+79671129918', '+79067497194', '+79265697331', '+79774852128', '+79169331415', '+79778537699', '+79295935082', '+79036164951', '+79265456343', '+79160637958', '+79153938383', '+79202947047', '+79094415539', '+79163760920', '+79778335582', '+79260416805', '+79096424318', '+79261104059', '+79017898975', '+79687003305', '+79175388113', '+79917554756', '+79037103662', '+79265817285', '+79256690711', '+79177855745', '+79157673394', '+79307996666', '+79161830213', '+79991726173', '+79096573020', '+79919269148', '+79661854047', '+79163171624', '+79164944048', '+79166401032', '+79859852098', '+79955089498', '+79033290798', '+79151833183', '+79805131414', '+79637672150', '+79031237892', '+79255435981', '+79041155543', '+79150553105', '+74993224596', '+79660478888', '+79269469371', '+79672394991', '+79169421904', '+79955570508', '+79660772393', '+79175712618', '+79266292787', '+79636262890', '+79104332609', '+79051117650', '+79167522026', '+79259304440', '+79854724700', '+79057006584', '+79039603088', '+79166197280', '+79176438879', '+79773978211', '+79296629063', '+79151260313', '+79991580684', '+79153138989', '+79151257415', '+79851409825', '+79773105028', '+79660567651', '+79153833134', '+79099088591', '+79296093748', '+79167441920', '+79330002565', '+79684006034', '+79886750505', '+79963469551', '+79851601070', '+79670612106', '+79035355854', '+79199610980', '+79262386338', '+79680467678', '+79772657403', '+79036740008', '+79777698182', '+79030107484', '+79264726192', '+79603555553', '+79168218086', '+79165207778', '+79161998181', '+79250881544', '+79618513444', '+79262743318', '+79378093447', '+79269324068', '+79036827854', '+79651443881', '+79037281547', '+79175298090', '+79859111546', '+79266890057', '+79057541897', '+79096593711', '+79886779988', '+79030005892', '+79151029828', '+79150603260', '+79267664346', '+79645564945', '+79031086940', '+79683885375', '+79262123425', '+79854331719', '+79162762681', '+79290359595', '+79645515667', '+79253243555', '+79161065333', '+79774589404', '+79640272288', '+79067376321', '+79017550501', '+79651441064', '+79057920211', '+79852296332', '+79037997081', '+79057354757', '+79152323283', '+79260940226', '+79773428754', '+79154307341', '+79169503025', '+79775171102', '+79013391739', '+79104772785', '+79778502767', '+79263766376', '+79032544843', '+79262590576', '+79777235226', '+79290202095', '+79266463406', '+79099956565', '+79100012006', '+79266263299', '+79037681166', '+79260775155', '+79035556633', '+79611133616', '+79855070717', '+79859245010', '+79265266950', '+79646454162', '+79633835566', '+79104128814', '+79295059035', '+79663368868', '+79161960810', '+79055924555', '+79259980421', '+79651666150', '+79264148105', '+79255515299', '+79154040028', '+79296753233', '+79521223983', '+79151747375', '+79265973280', '+79636607540', '+79776716435', '+79262636010', '+79060629110', '+79166161179', '+79997812234', '+79164092168', '+79998469090', '+79263762383', '+79164798975', '+79852114028', '+79267670740', '+79999118870', '+79309153325', '+79645376540', '+79153564696', '+79260090554', '+79262357651', '+79065793417', '+79629103330', '+79251069322', '+79205700650', '+79010927733', '+79187227858', '+79251810909', '+79054133750', '+79167395360', '+79654907111', '+79178614293', '+79251631802', '+79017835199', '+79082488060', '+79859991479', '+79055056086', '+79168102044', '+79169477544', '+79006297111', '+79776186005', '+79037778120', '+79031051493', '+79031462292', '+79653056665', '+79527615944', '+79637669676', '+79104253557', '+79163080476', '+79688644671', '+79775061335', '+79778757725', '+79857748910', '+79263209438', '+79169670114', '+79152267506', '+79888326831', '+79250801848', '+79067429277', '+79268187082', '+79521152666', '+79685667187', '+79380007795', '+79859215715', '+79152094017', '+79169070443', '+79857678675', '+79267929822', '+79269646502', '+79258386689', '+79686139927', '+79104848131', '+79260181464', '+79013441185', '+79634090002', '+79151482716', '+79036724725', '+79035794070', '+79265267755', '+79035928737', '+79261693670', '+79773494836', '+79168080199', '+79153346714', '+79251637080', '+79152944022', '+79257725490', '+79936660905', '+79857636978', '+79853888758', '+79644440262', '+79169082351', '+79261469809', '+79168553611', '+79998270472', '+79161518042', '+79264647543', '+79051114090', '+79688700444', '+79099079834', '+79257722502', '+79012965540', '+79639626009', '+79260823282', '+79002175499', '+79652370042', '+79859733010', '+79774119057', '+79000417220', '+79065409081', '+79854265773', '+79162527734', '+79154221121', '+79168556677', '+79258741235', '+79918822823', '+79254242151', '+79005262174', '+79165265777', '+79991207032', '+79858662452', '+79859983339', '+79851260205', '+79053869779', '+79166936456', '+79051905580', '+79603244063', '+79175558900', '+79037746975', '+79036777119', '+79207721975', '+79099350791', '+79055415944', '+79163951169', '+79035682905', '+79263599949', '+79104130979', '+79039798333', '+79855553302', '+79152364859', '+79252897303', '+79017601266', '+79163816603', '+79264064631', '+79807515605', '+79164084582', '+79250208185', '+79645634004', '+79772697875', '+79035132143', '+79169010156', '+79166214091', '+79035495247', '+79153273632', '+79104277049', '+79035234768', '+79772822779', '+79654322518', '+79150381940', '+79268696051', '+79859666905', '+79164255353', '+79652419696', '+79646929747', '+79168467722', '+79158078589', '+79778525702', '+79257976620', '+79629802009', '+79152730553', '+79152954768', '+79265472511', '+79168342476', '+79771609038', '+79036742120', '+79262477220', '+79857195450', '+79259327513', '+79268280710', '+79265725300', '+79037537632', '+79261094735', '+79250345565', '+79175907411', '+79509984119', '+79032558681', '+79199638844', '+79032553688', '+79166537174', '+79850344555', '+79917085398', '+79265460627', '+79199612661', '+79096973758', '+79057426295', '+79255935787', '+79162450414', '+79031901155', '+79257104047', '+79031020010', '+79035877176', '+79851254330', '+79256252310', '+79036626667', '+79637519373', '+79852404029', '+79637772265', '+79060886166', '+79686050525', '+79035225595', '+79096498788', '+74104539001', '+79262546110', '+79267878277', '+79104642238', '+79161848151', '+79036125222', '+79857665086', '+79859981854', '+79199612165', '+79175672289', '+79261299829', '+79258025247', '+79035853519', '+79254433850', '+79151166678', '+79251200057', '+79999103371', '+79031858491', '+79250283035', '+79850007887', '+79265504876', '+79631727708', '+79275529911', '+79776543456', '+79803790712', '+79096443233', '+79167476020', '+79263535562', '+79177800378', '+79177803789', '+79668610411', '+79776023592', '+79261686485', '+79163153596', '+79859370622', '+79257807715', '+79879228739', '+79037903832', '+79629649402', '+79032357162', '+79263576349', '+79035446970', '+79250250366', '+79104520270', '+79150026250', '+79641667182', '+79037907439', '+79689759900', '+79160297305', '+79255274165', '+79819737998', '+79261174267', '+79636278846', '+79998779258', '+79055837030', '+79267105813', '+79262898705', '+79823693047', '+79035735819', '+79162527870', '+79647043485', '+79031013137', '+79852001616', '+79636545555', '+79270682066', '+79637228880', '+79036887522', '+79269190066', '+79057146056', '+79850789019', '+79851430288', '+79099794270', '+79778012450', '+79851981838', '+79096736099', '+79295629361', '+79891898888', '+79262074707', '+79037392676', '+79852257572', '+79164657664', '+79163059353', '+79031452589', '+79037972247', '+75245656445', '+79859952276', '+79067336161', '+79178464569', '+79163900861', '+79852441411', '+79168543519', '+79859991344', '+79055440767', '+79858389408', '+79104786754', '+79104793052', '+79777991995', '+79919342982', '+79250014055', '+79253054750', '+78962263183', '+79168193235', '+79067584885', '+79296677680', '+79685416451', '+79168238012', '+79152885949', '+79260663756', '+79104723264', '+79637551177', '+79165442056', '+79253167857', '+79673328675', '+79690003930', '+79687347472', '+79081817787', '+79015303515', '+79875150495', '+79154128747', '+79690315131', '+79060674920', '+79852100757', '+79851945799', '+79266226170', '+79296658416', '+79033445606', '+79030042069', '+79999115036', '+79165704649', '+79651137637', '+79266944680', '+79162592909', '+79033893061', '+79151339217', '+79265551435', '+79773302219', '+79169077923', '+79104835480', '+79067464799', '+79099139900', '+79152943539', '+79167286050', '+79036706070', '+79031450221', '+79167056146', '+79995450600', '+79775736070', '+79175111006', '+79104103821', '+79162255788', '+79263209460', '+79269177005', '+79262179506', '+79853372665', '+79120113837', '+79150902985', '+79055221127', '+79039721580', '+79687577717', '+79164491736', '+79856005217', '+79250055040', '+79161754827', '+79035429555', '+79167473485', '+79038912241', '+79167355777', '+79165409176', '+79099904858', '+79031211661', '+79057969368', '+79258413150', '+79163224938', '+79265967066', '+79253632424', '+79057512113', '+79035615504', '+79999860601', '+79163912823', '+79156702892', '+79262689712', '+79030072592', '+79680304030', '+79057348112', '+79255065762', '+79152508340', '+79851534225', '+79163974755', '+79281080907', '+79262001258', '+79104254321', '+79161012031', '+79687009033', '+79680567755', '+79152125169', '+79162225822', '+79166224280', '+79852782244', '+79268391550', '+79169121475', '+79160560133', '+79163634124', '+79262751586', '+79166057847', '+79663291891', '+79164334381', '+79163949938', '+79160094440', '+79885040666', '+79035709684', '+79998141690', '+79951200625', '+79161209447', '+79263811012', '+79654736951', '+79167015514', '+79163071871', '+79257016173', '+79037317676', '+79161067853', '+79161433456', '+79035285349', '+79621591919', '+79266847778', '+79538881863', '+79037777756', '+79859983515', '+79037799804', '+79163801086', '+79037833302', '+79161776641', '+79104155152', '+79670710002', '+79514225441', '+79104207700', '+79611615763', '+79031089800', '+79859100554', '+79150961003', '+79169080641', '+79037970126', '+79265731758', '+79261767233', '+79037086679', '+79854440550', '+79032183488', '+79857656747', '+79057543104', '+79055154522', '+79164363043', '+79035777727', '+79055408349', '+79055147498', '+79637505651', '+79852370766', '+79253582819', '+79636272049', '+79255676201', '+79055440252', '+79152589396', '+79169539481', '+79629887788', '+79151291649', '+79153684782', '+79160113648', '+79263971752', '+79257170090', '+79638844567', '+77926775998', '+79132742888', '+79663599521', '+79153988591', '+79361113688', '+79835503595', '+79687303033', '+79151584987', '+79859071987', '+79035102552', '+79150833229', '+79100057378', '+79035902719', '+79299831320', '+79261499069', '+79260788016', '+79670983252', '+79030048787', '+79167314030', '+79645069285', '+79034803151', '+79099191151', '+79032829120', '+79670081999', '+79167779325', '+79165205553', '+79099789901', '+79096263033', '+79185529270', '+79044000054', '+79161897430', '+79219704617', '+79160588630', '+79645035302', '+79167034693', '+79999907079', '+79264037002', '+79251438286', '+79152451370', '+79161514141', '+79661461166', '+79859764631', '+79912285204', '+79160927000', '+79671146364', '+79689513071', '+79099175804', '+79161633579', '+79265775131', '+79299175160', '+79859239221', '+79257092411', '+79853644210', '+79653103136', '+79165724482', '+79263694143', '+79295635539', '+79775298848', '+79615846338', '+79629144914', '+79672914549', '+79055419496', '+79160680377', '+79165144767', '+79265905081', '+79857820857', '+79651369234', '+79017018541', '+79774351147', '+79260256064', '+79309494642', '+79969646896', '+79167048424', '+79859650299', '+79296264300', '+79155931507', '+79933373303', '+79261984789', '+79035900195', '+79853355667', '+79169246484', '+79645699028', '+79255165570', '+79684921433', '+79859224893', '+79687460358', '+79651104916', '+79670638475', '+79031539164', '+79688135079', '+79199382469', '+79600567676', '+79172208777', '+79687034848', '+79162530970', '+79039642015', '+79636499898', '+79997117163', '+79162005850', '+79104700534', '+79263688520', '+79663871715', '+79162005650', '+79037659977', '+79670255252', '+79262486119', '+79151723195', '+79152182473', '+79057056053', '+79100023395', '+79037866144', '+79153063315', '+79934440707', '+79625406559', '+79163343323', '+79645590672', '+79153338300', '+79285277222', '+79091790457', '+79263512756', '+79104866771', '+79965346070', '+79639342488', '+79032012170', '+79265860708', '+79107921030', '+79886704537', '+79998029791', '+79251242045', '+79164346535', '+79161501425', '+79032327978', '+79261480916', '+79506065426', '+79163288551', '+79990025859', '+79299104444', '+79163557919', '+79164442474', '+79637646528', '+79991111105', '+79180155637', '+79265392664', '+79295599477', '+79651466147', '+79999693216', '+79035026140', '+79104585361', '+79771751523', '+79260026676', '+79663036767', '+79670695550', '+79190088817', '+79099510425', '+79166171424', '+79771940215', '+79175093914', '+79055706807', '+79220027003', '+79037864666', '+79998207570', '+79653936961', '+79689283156', '+79269657483', '+79777880164', '+79247259961', '+79184163362', '+79037708053', '+79037321008', '+79959167545', '+79164012035', '+79251889925', '+79168502823', '+79175779209', '+79267898079', '+79163955703', '+79998523019', '+79998055394', '+79250729198', '+79275222009', '+79857617637', '+79162403227', '+79672240025', '+79653283030', '+79262266330', '+79035535055', '+79389054899', '+79099444564', '+79100857398', '+79161629115', '+79037537075', '+79151025420', '+79998076489', '+79035147027', '+79162047228', '+79689241237', '+79005839331', '+79250359895', '+79152333434', '+79875790138', '+79774210642', '+79205501926', '+79265259795', '+79778311600', '+79175633078', '+79858176167', '+79169974174', '+79036636065', '+79998108783', '+79776596741', '+79360005355', '+79857760373', '+79267165311', '+79588323677', '+79055436343', '+79064885228', '+79150994846', '+79075301118', '+79060955500', '+79007119466', '+79251343857', '+79166400660', '+79773998846', '+79777632000', '+79035188220', '+79054441000', '+79616314949', '+79687168757', '+79265361920', '+79772559099', '+79648697308', '+79153557937', '+79058332815', '+79890843529', '+79031757733', '+79859063611', '+79263572159', '+79257338727', '+79161243044', '+79099207465', '+79998985707', '+79671252664', '+79652114112', '+79151761556', '+79774009317', '+79957952092', '+79163061880', '+79999626211', '+79032799595', '+79672738470', '+79689210303', '+79036245209', '+79265937157', '+79262067616', '+79057918300', '+79691138599', '+79505893333', '+79778898165', '+79999276317', '+79000764578', '+79161787896', '+79876636820', '+79268479919', '+79668417170', '+79007653000', '+79035700770', '+79166956672', '+79998935100', '+79007649995', '+79951573973', '+79215115855', '+79647259179', '+79776118954', '+79013854104', '+79636942325', '+79957476066', '+79037233389', '+79167307740', '+79031472882', '+79636829404', '+79944444048', '+79856654818', '+79159710926', '+79670211747', '+79057376724', '+79955002649', '+79295652271', '+79778943484', '+79169016104', '+79030102393', '+79055748218', '+79164846733', '+79167963522', '+79057107959', '+79162381320', '+79196660400', '+79123691547', '+79175304649', '+79096678777', '+79639999408', '+79220213727', '+79859869895', '+79647657532', '+79104071631', '+79639939350', '+79851958120', '+79287044002', '+79647813366', '+79623616875', '+79854185974', '+79160334268', '+79055239262', '+79153506284', '+79030060065', '+79167476238', '+79032200011', '+79268719939', '+79617851367', '+79637508643', '+79851371505', '+79251979323', '+79262640969', '+79777023592', '+79910987267', '+79166704655', '+79261318714', '+79774720894', '+79773498072', '+79611444448', '+79063335461', '+79632399629', '+79161883823', '+79266577787', '+79017712904', '+79653148058', '+79167161744', '+79607252793', '+79165786728', '+79800052579', '+79999996709', '+79857293439', '+79118666640', '+79778303450', '+79999686688', '+79670686931', '+79001540895', '+79037959010', '+79261459756', '+79167304545', '+79104432514', '+79250222613', '+79851037774', '+79285600666', '+79253819088', '+79319009165', '+79152777701', '+79057766081', '+79289646469', '+79990302020', '+79653361583', '+79295545232', '+79031533606', '+79260967440', '+79266926867', '+79188656500', '+79268908831', '+79852115236', '+79254612532', '+79269168881', '+79031697067', '+79166150375', '+79687864048', '+79257206613', '+79166525410', '+79037106009', '+79153326168', '+79685932939', '+79165501539', '+79670430078', '+79058885377', '+79160711757', '+79261373538', '+79752322263', '+79854259855', '+79772960765', '+79267939990', '+79037956055', '+79035079217', '+79654452134', '+79387778740', '+79779487944', '+79777586377', '+79268112011', '+79169256966', '+79253434797', '+79774833898', '+79055675700', '+79884481692', '+79855309972', '+79067007359', '+79506096010', '+79268213194', '+79859705073', '+79096559758', '+79268474928', '+79897094936', '+79268788870', '+79260856190', '+79778583979', '+79850043037', '+79162533109', '+79040840781', '+79099054484', '+79100768997', '+79166135108', '+79035084646', '+79170270600', '+79670015958', '+79031994228', '+79601193674', '+79258883549', '+79167852675', '+79166663328', '+79161580888', '+79153498757', '+79150788345', '+79262048922', '+79031629162', '+79031031820', '+79296646100', '+79169305344', '+79175295108', '+79031044999', '+79771772707', '+79919799206', '+79259588200', '+79057803314', '+79856001255', '+79256313468', '+79163028887', '+79998133979', '+79167746510', '+79036692071', '+79267759982', '+79175084735', '+79162958095', '+79169999900', '+79933504416', '+79253070355', '+79254460693', '+79263888778', '+79654398445', '+79168417722', '+79100587682', '+79152828046', '+79778313160', '+79060953436', '+77903148772', '+79031487727', '+79168576576', '+79263383880', '+79263430671', '+77985263097', '+79165115952', '+79268159852', '+79099101038', '+79037617004', '+79197670235', '+79257716709', '+79255060904', '+79036627050']}, {}]

#
# salon_id = input("Введите salon id ", )
# stdate = input("Введите Начальную дату визитов (формат YYYY-MM-DD) ", )
# enddate = input("Введите Конечную дату визитов (формат YYYY-MM-DD) ", )
# c_stdate = input("Введите Начальную дату создания визитов (формат YYYY-MM-DD) ", )
# c_enddate = input("Введите Конечную дату создания визитов (формат YYYY-MM-DD) ", )
# page = input("Введите страницу (в api запросе на получение записей максимум 1000 результатов на страницу, если записей меньше, просто оставьте 1 ", )
# Bearer u8xzkdpkgfc73uektn64, User 3d92329c3693c90a512d247f2a91ba2d
# salon_id = [730934,266545,467564,380088,380085,318267,187296,173066,187571,560791,593319,552130]
# 467564 560791 593319 552130 - нет юзера
salon_id = [593319]
stdate = "2000-01-01"
enddate = datetime.date.today()

print(enddate)
dataset = [{}]
clid = []
recdata = []
phones = []
def findrec(salon, client):
    url = f"https://api.yclients.com/api/v1/records/{salon}?count=100&client_id={client}"
    payload = ""
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=SRoFlSyUb8pCm_Hy6teKbZSVP0RvifVqk_U5L1yhbPY-1672310753-0-ASpA43kPIrIv6YwW/UwhZptVR9zXq7fJ76HU4yXJ35SavwZOW89gSTDFeSiN6VRjSMGSwWNbqGemyCrN6T19heQ=; _cfuvid=p7nUXL8oIvXY2lDDmXMQABeybXrWwPcphBL1X4PPq6I-1672310753861-0-604800000; auth=1ssiuqf71r7sethgdi176k8ll6gju5tc8rapffud16sqa5oihdh01s13sjlj7jjb'
    }

    response = requests.request("GET", url, headers=headers, data=payload)
    request_data = response.json()
    rdata = []
    for i in range(len(request_data["data"])):
        if request_data["data"][i]["attendance"] == 1:
            rdata = request_data["data"]
            break
    return rdata





def put_record(salon,rec_id, data):
    url3 = f"https://api.yclients.com/api/v1/record/{salon}/{rec_id}"
    payload = json.dumps(data)
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=7U9A9XA22HiCfsgeV5.7CEWM2ZO05_FpxXCoLZf6zZU-1672309174-0-AW4GWNaYZ9lJc86eOJ2WNGqYj2RrATN2R9QjSGHLxt72J9O48Ho0GR6LhnGUfboA1IOlPXJ4YCY0sQlv4/GLoFc=; _cfuvid=1N8l_emLiaoDXvgjX8IezQBDkgTiU8HSS5sHnIN9LpQ-1672309174478-0-604800000; auth=1ssiuqf71r7sethgdi176k8ll6gju5tc8rapffud16sqa5oihdh01s13sjlj7jjb'
    }

    response3 = requests.request("PUT", url3, headers=headers, data=payload)
    pprint.pprint(response3.text)


def read_record(rec_id):
    url2 = f"https://api.yclients.com/api/v1/record/{salon_id}/{rec_id}"

    payload = {}
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=7U9A9XA22HiCfsgeV5.7CEWM2ZO05_FpxXCoLZf6zZU-1672309174-0-AW4GWNaYZ9lJc86eOJ2WNGqYj2RrATN2R9QjSGHLxt72J9O48Ho0GR6LhnGUfboA1IOlPXJ4YCY0sQlv4/GLoFc=; _cfuvid=1N8l_emLiaoDXvgjX8IezQBDkgTiU8HSS5sHnIN9LpQ-1672309174478-0-604800000; auth=1ssiuqf71r7sethgdi176k8ll6gju5tc8rapffud16sqa5oihdh01s13sjlj7jjb'
    }

    response2 = requests.request("GET", url2, headers=headers, data=payload)
    request_data2 = response2.json()
    ret = request_data2["data"]
    print("Проверяем детали записи")
    pprint.pprint(ret)
    # сохраняем значение по умолчанию
    true_attendance = request_data2["data"]["attendance"]

    # меняем статус визита на клиент пришел
    ret["attendance"] = 1
    # запускаем функцию с пут запросом
    put_record(rec_id, ret)

    # проверяем че натворили
    print("Проверяем что изменилось в записи")
    response2 = requests.request("GET", url2, headers=headers, data=payload)
    request_data2 = response2.json()
    pprint.pprint(request_data2)

    # меняем статус визита на ожидание
    ret["attendance"] = 0
    # запускаем функцию с пут запросом
    put_record(rec_id, ret)

    # меняем статус визита на изначальный
    ret["attendance"] = true_attendance
    # запускаем функцию с пут запросом
    put_record(rec_id, ret)

    print("Проверяем изменения обратно")
    response2 = requests.request("GET", url2, headers=headers, data=payload)
    request_data2 = response2.json()
    pprint.pprint(request_data2)



#
# f = open('out.txt', 'a')
# out = json.dumps(recid, ensure_ascii=False)
# f.write(", \n ")
# f.write(f'{out}')
# f.write("\n")
# f.close()

def delete(salon, id):
    url = f"https://api.yclients.com/api/v1/loyalty/cards/{salon}/{id}"

    payload = {}
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=Hohc7jBTvF5cqI4Gh4mJzwgqedYnvQvo6c06OftFwbM-1678702086-0-AUhdK8QIhkJ5icX30mBjv2GMqI7oQwoslhtjd1faa6dfxCV8u9I3y2O+PFz1BOBA6PKZ15oIo9XhbsQewDDS1MA=; _cfuvid=WWWc1BCmMKCtQPsX3ws0MudXPXjvnnzUuRfQEoP2JjI-1678702086250-0-604800000; auth=f5h1qav8jbiepmlvjd17hnplesoeb95mt4g9luq1m645ns8u2ld279k75sntonqm'
    }
    response = requests.request("DELETE", url, headers=headers, data=payload)
    print(response.text)

def create(salon, number, phone):
    url = f"https://api.yclients.com/api/v1/loyalty/cards/{salon}"

    payload = json.dumps({
        "loyalty_card_number": f"{number}",
        "loyalty_card_type_id": "43913",
        "phone": f"{phone}"
    })
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=Hohc7jBTvF5cqI4Gh4mJzwgqedYnvQvo6c06OftFwbM-1678702086-0-AUhdK8QIhkJ5icX30mBjv2GMqI7oQwoslhtjd1faa6dfxCV8u9I3y2O+PFz1BOBA6PKZ15oIo9XhbsQewDDS1MA=; _cfuvid=WWWc1BCmMKCtQPsX3ws0MudXPXjvnnzUuRfQEoP2JjI-1678702086250-0-604800000; auth=f5h1qav8jbiepmlvjd17hnplesoeb95mt4g9luq1m645ns8u2ld279k75sntonqm'
    }

    response = requests.request("POST", url, headers=headers, data=payload)

    print(response.text)


def getcard(clid,phone):
    url = f"https://api.yclients.com/api/v1/loyalty/client_cards/{clid}"
    payload = {}
    headers = {
        'Accept': 'application/vnd.yclients.v2+json',
        'Content-Type': 'application/json',
        'Authorization': 'rj257pguzmdk9fgaz8cr, e69793634796c00b57cb4bfd34f361d8',
        'Cookie': '__cf_bm=i3CV.Z4uol6DJbU_tIcBy5PadxjXHtC1kLE9wpD1E90-1678703816-0-AW58FMEbp+P7VcM064z/Qcvh3IRyP60NYDY0UV4qqw2EGF5vbSG2vnjVdlZG3gpZY7wX4F/4FmnqCgHccTJaYC8=; _cfuvid=WWWc1BCmMKCtQPsX3ws0MudXPXjvnnzUuRfQEoP2JjI-1678702086250-0-604800000; auth=f5h1qav8jbiepmlvjd17hnplesoeb95mt4g9luq1m645ns8u2ld279k75sntonqm'
    }
    number = 0
    id = 0
    response = requests.request("GET", url, headers=headers, data=payload)
    responsepretty = response.json()
    # print(responsepretty)
    for i in range(len(responsepretty["data"])):
        if responsepretty["data"][i]["type_id"] == 43913:
            number = responsepretty["data"][i]["number"]
            id = responsepretty["data"][i]["id"]
    print(number, id)
    delete(salon_id[0], id)
    create(salon_id[0], number, phone)


def parseclient(salon, page):

    url = f"https://api.yclients.com/api/v1/company/{salon}/clients/search"

    payload = json.dumps({
      "page": page,
      "page_size": 200,
      "fields": [
        "id",
        "name",
        "phone"
      ]
    })
    headers = {
      'Accept': 'application/vnd.yclients.v2+json',
      'Content-Type': 'application/json',
      'Authorization': 'u8xzkdpkgfc73uektn64, 3d92329c3693c90a512d247f2a91ba2d',
      'Cookie': '__cf_bm=QRRZG.t_Jyk7o87ZCfTX5JShaf5znUKIBiVVFXSQO64-1678541055-0-AVQZOvnbMJdQUvxkRPcSGnv/R7wLhew6XFm1Q6GJHGxk68mQR8wVGqlz5dxYsQJTWkJsG2mCZo68BuDDbEjz6Jc=; _cfuvid=aGYK6E766WaUNai77oMnL6.nMRgpwrvDFg8lAOyyn8k-1678541055857-0-604800000; auth=f5h1qav8jbiepmlvjd17hnplesoeb95mt4g9luq1m645ns8u2ld279k75sntonqm'
    }

    response = requests.request("POST", url, headers=headers, data=payload)
    pretty_response = response.json()
    global clid
    global phones
    total_count = pretty_response["meta"]["total_count"]
    iterations = math.ceil(total_count/200)
    # print(iterations)

    for i in range(len(pretty_response["data"])):
        clid.append(pretty_response["data"][i]["id"])
        phones.append(pretty_response["data"][i]["phone"])
    print(len(clid))
    print(clid)
    print(response.text)
    return iterations

# это рабочая штука, забрать все clid и salon_id на выходе словарь {"salon" : [clid]}
for x in range(len(salon_id)):
    page = 1
    it = parseclient(salon_id[x],page)
    for i in range(2,it+1):
        parseclient(salon_id[x],i)
    dataset[-1]["salon"] = salon_id[x]
    dataset[-1]["clid"] = clid
    dataset[-1]["phone"] = phones
    clid = []
    phones = []
    dataset.append({})

# print(len(data[0]["phone"]))

# print(dataset)
# print(dataset)
for i in range(len(dataset[0]["clid"])):
    print(dataset[0]["phone"][i])
    getcard(dataset[0]["clid"][i],dataset[0]["phone"][i])
# getcard(174016687,79933504416)


# create(salon_id[0],"43913.63da5f3048bc423bb2082cf7","79663891715")
# print(data[0]["phone"][0])
# rdata = findrec(730934, 152257130)
# rid = rdata[0]["id"]
# print(rdata[0]["attendance"])

#меняем на подтвердил
# rdata[0]["attendance"] = 2
# print(rdata)
# put_record(730934,rid,rdata[0])
#
# #меняем на пришел
# rdata[0]["attendance"] = 1
# print(rdata)
# put_record(730934,rid,rdata[0])

# put_record(730934,rid,)


# print(dataset)
# for j in range(len(dataset)-1):
#     print(f'salon: {dataset[j]["salon"]}, len: {len(dataset[j]["clid"])}')



